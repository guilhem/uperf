# uperf configure file
# neel@sun.com
AC_INIT(uPerf, 0.2.1,neel@sun.com)
AC_CONFIG_SRCDIR([src/flowops.c])
AC_CONFIG_HEADER([config.h])

CFLAGS="${CFLAGS=}"
UPERF_LIBS="${UPERF_LIBS=}"
UPERF_LIBS="$UPERF_LIBS -lpthread -lrt -lm"

# Checks for programs.
AM_INIT_AUTOMAKE(uperf, 0.2.1)
AC_PROG_CC
AC_PROG_RANLIB
AC_PROG_MAKE_SET

case "$CC" in
	gcc)
		AC_MSG_NOTICE([*** Setting flags for gcc ***])
		CFLAGS="$CFLAGS -O2 -D_REENTRANT"
		;;
	cc)
		AC_MSG_NOTICE([*** Setting flags for Sun Compiler ***])
		CFLAGS="$CFLAGS -mt -xO3"
		;;

esac


#enable these by default
netstat_default="yes"
udp_default="yes"
sctp_default="yes"
ssl_default="yes"

good_os="yes"
case "$(uname -s)" in
	Linux)
		AC_MSG_NOTICE([*** Linux Machine ***])
		AC_DEFINE([UPERF_LINUX],[1],[Setting machine os to Linux])
		good_os="no"
		sctp_default="no"
		ssl_default="no"
		#UPERF_LIBS="$UPERF_LIBS -lrt -lm"
		CFLAGS="-D_GNU_SOURCE $CFLAGS"
		;;
	SunOS)
		AC_MSG_NOTICE([*** Solaris Machine ***])
		AC_DEFINE([UPERF_SOLARIS],[1],[Setting machine os to Solaris])
		UPERF_LIBS="$UPERF_LIBS -lsocket -lnsl -lumem -lkstat -lsendfile"
		;;
esac

# Solaris 9 and below do not support RUSAGE_LWP with getrusage
# fallback to using /proc if not defined
AC_MSG_CHECKING(if we can use getrusage)
AC_COMPILE_IFELSE([[#include <sys/resource.h>
		int i=RUSAGE_LWP;]],
		[AC_MSG_RESULT(yes)
	  	 AC_DEFINE([USE_GETRUSAGE],[1],[Have getrusage])
		], 
		[
		 AC_MSG_RESULT(no)
		 ## AC_DEFINE([USE_PROC], [1], [Use proc])
		])

# Some solaris versions do not define BSWAP_* macros
AC_MSG_CHECKING(BSWAP_ macros)
AC_COMPILE_IFELSE([[#include <sys/byteorder.h>
		int i=BSWAP_32(1);]],
		[AC_MSG_RESULT(yes)
	  	 AC_DEFINE([HAVE_BSWAP],[1],[Have BSWAP_ macros])
		], 
		[AC_MSG_RESULT(no)
		])



AM_CONDITIONAL([HAVE_CPC], [false])
AM_CONDITIONAL([HAVE_KSTAT], [false])
# Checks for libraries.
AC_MSG_NOTICE(checking to see whether to enable cpu performance counters support)
cpc="Not enabled"
AC_CHECK_LIB([cpc], [cpc_open],
	[
     	  #AC_MSG_RESULT(yes)
	  AC_DEFINE([USE_CPC],[1],[Have cpu perf counters?])
	  AC_DEFINE([USE_CPCv2],[1],[Have version2 cpu perf counters?])
	  UPERF_LIBS="$UPERF_LIBS -lcpc -lintl"
	  cpc="CPC version 2"
	  AM_CONDITIONAL([HAVE_CPC], [true])
          AC_DEFINE([HAVE_CPC],[1],[Have libcpc ])
	],
	[ #check for v1
		AC_CHECK_LIB([cpc], [cpc_version],
		 	[AC_DEFINE([USE_CPC],[1],[Have cpu perf counters?])
			 AC_DEFINE([USE_CPCv1],[1],[Have version1 cpu perf counters?])
			 UPERF_LIBS="$UPERF_LIBS -lcpc"
	  		AM_CONDITIONAL([HAVE_CPC], [true])
          		AC_DEFINE([HAVE_CPC],[1],[Have libcpc ])
	  		cpc="CPC version 1"
     	  		 #AC_MSG_RESULT(yes)
			]
	  		[ AM_CONDITIONAL([HAVE_CPC], [false])
	  	        	cpc="Not supported"
          		  AC_DEFINE([HAVE_CPC],[0],[Have libcpc ])
			]
		)
	]
)

AC_CHECK_LIB([kstat], [kstat_open],
	[ AC_DEFINE([HAVE_LIBKSTAT], [1], [Have libkstat])
	  UPERF_LIBS="$UPERF_LIBS -lkstat"
	  AM_CONDITIONAL([ENABLE_NETSTAT], [true])
	],
	[ AC_MSG_RESULT(no)
	  AM_CONDITIONAL([ENABLE_NETSTAT], [false])
	]
)

AC_MSG_CHECKING(whether to enable netstat support)
AC_ARG_ENABLE(netstat, 
	AC_HELP_STRING([--enable-netstat], [Collect network stats? default=yes]),, 
	enable_netstat=$netstat_default)
if test "x$enable_netstat" = "xyes"; then
	AM_CONDITIONAL([ENABLE_NETSTAT], [true])
	AC_DEFINE([ENABLE_NETSTAT],[1],[collect nw stats])
	AC_MSG_RESULT(yes)
else
	ENABLE_NETSTAT=
	AM_CONDITIONAL([ENABLE_NETSTAT], [false])
	AC_MSG_RESULT(no)
fi

AC_CHECK_HEADERS([atomic.h siginfo.h sys/int_limits.h sys/lwp.h signal.h sys/byteorder.h poll.h sys/poll.h sys/varargs.h stdint.h])

AC_CHECK_FUNCS([nanosleep])

AC_MSG_CHECKING(whether to enable debug mode)
AC_ARG_ENABLE(debug,
     AC_HELP_STRING([--enable-debug],[Turn on debugging]),
     [case "${enableval}" in
       yes) debug=true 
     	    AC_DEFINE([DEBUG],[1],[Debug])
	    CFLAGS="$CFLAGS -g"
     	    AC_MSG_RESULT(yes)
            ;;
       no)  debug=false 
     	    AC_MSG_RESULT(no)
       		;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
     esac],[debug=false AC_MSG_RESULT(no)])
     AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

#check for udp
AC_MSG_CHECKING(whether to enable udp support)
AC_ARG_ENABLE(udp, 
	AC_HELP_STRING([--enable-udp], [Turn on udp support]),, 
	enable_udp=$udp_default)
if test "x$enable_udp" = "xyes"; then
	AM_CONDITIONAL([UDP_C], [true])
	AC_DEFINE([HAVE_UDP],[1],[Have udp])
	AC_MSG_RESULT(yes)
else
	UDP_C=
	AM_CONDITIONAL([UDP_C], [false])
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether to enable sctp support)
AC_ARG_ENABLE(sctp, 
	AC_HELP_STRING([--enable-sctp],[Turn on sctp support ]),,
	enable_sctp=$sctp_default)
if test "x$enable_sctp" = "xyes"; then
	AC_MSG_RESULT(yes)
	AC_CHECK_LIB([sctp],[sctp_sendmsg], [UPERF_LIBS="$UPERF_LIBS -lsctp"],
		[AC_MSG_ERROR([cannot find libsctp, Try with --disable-sctp])])

	AM_CONDITIONAL([SCTP_C], [true])
	AC_DEFINE([HAVE_SCTP],[1], [Have sctp])
else
	SCTP_C=
	AM_CONDITIONAL([SCTP_C], [false])
	AC_MSG_RESULT(no)
fi

AC_ARG_WITH(ssl-includes,
	AC_HELP_STRING([--with-ssl-includes=DIR],
               [Specify location of ssl headers]),
      [CPPFLAGS="$CPPFLAGS -I$withval"],
      [CPPFLAGS="$CPPFLAGS -I/usr/sfw/include"])

AC_ARG_WITH(ssl-libs,
	AC_HELP_STRING([--with-ssl-libs=DIR],
               [Specify location of ssl libraries]),
		[],[])
	##[LDFLAGS="$LDFLAGS -L$withval -R$withval"],
	##[LDFLAGS="$LDFLAGS -L/usr/sfw/lib -R/usr/sfw/lib"])



AC_MSG_CHECKING(whether to enable ssl support)
AC_ARG_ENABLE(ssl, 
	AC_HELP_STRING([--enable-ssl],[Turn on ssl support ]),, 
	enable_ssl=$ssl_default)
if test "x$enable_ssl" = "xyes"; then
	AC_MSG_RESULT(yes)
	AC_CHECK_LIB([ssl], [SSL_CTX_new],[],
		[echo Error: Cannot find libssl. Try with --disable-ssl; exit -1])
	AM_CONDITIONAL([SSL_C], [true])
	AC_DEFINE([HAVE_SSL],[1],[Have ssl ])
	UPERF_LIBS="$UPERF_LIBS -lcrypto -lssl"
else
	SSL_C=
	AM_CONDITIONAL([SSL_C], [false])
	AC_MSG_RESULT(no)
fi

timestamp=`date`

AC_DEFINE_UNQUOTED([CONFIGURED_ON],["$timestamp"],[Configured on])
AC_DEFINE_UNQUOTED([BUILD_DATE],["$timestamp"],[Built on])

AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(UPERF_LIBS)


#AC_CONFIG_FILES([Makefile
AC_OUTPUT([Makefile
                 src/Makefile
                 workloads/Makefile])

echo "CC=$CC"
echo " "
echo " "
echo "+------------------------------------------------+"
if test x$build_master = xfalse; then
	echo "| Warning: Will build only the slave             |"
else 
	echo "| Will build combined binary (master + slave)    |"
fi
echo "+------------------------------------------------+"
echo "| Supported Protocols:                           |"
printf "|%20s:%5s%22s|\n" "TCP" "yes" " "
printf "|%20s:%5s%22s|\n" "UDP" "${enable_udp}" " "
printf "|%20s:%5s%22s|\n" "SSL" "${enable_ssl}" " "
printf "|%20s:%5s%22s|\n" "SCTP" "${enable_sctp}" " "
echo "+------------------------------------------------+"
printf "|%33s:%14s|\n" "Network stats collection enabled?" "$enable_netstat"
printf "|%33s:%14s|\n" "CPU Performance counters?"  "$cpc"
echo "+------------------------------------------------+"

